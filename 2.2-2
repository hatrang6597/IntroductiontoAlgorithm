# Consider sorting nn numbers stored in array AA by first finding the smallest element of AA and exchanging it with the element in A[1]A[1].
# Then find the second smallest element of AA, and exchange it with A[2]A[2]. Continue in this manner for the first n-1n−1 elements of AA.
# Write pseudocode for this algorithm, which is known as selection sort. 
# What loop invariant does this algorithm maintain? 
#  Why does it need to run for only the first n-1n−1 elements, rather than for all nn elements?
# Give the best-case and worst-case running times of selection sort in \ThetaΘ-notation.

for i in range(len(A)):
    minIndex = i
    for j in range(i + 1, len(A)):
        if A[j] < A[minIndex] and j != minIndex:
            minIndex = j
    A[i], A[minIndex] = A[minIndex], A[i]
    
# Read more: https://atekihcan.github.io/CLRS/02/E02.02-02/
